<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to The Construct DREX</title>
    <style>
        body {
            background-color: #333; /* Dark background color */
            color: #fff; /* Text color */
            text-align: center;
            font-family: Arial, sans-serif;
        }

        .container {
            padding: 20px;
        }

        .logo {
            max-width: 300px;
            margin: 0 auto;
            display: block;
        }

        .connect-button {
            background-color: #3498db; /* Button background color */
            color: #fff; /* Button text color */
            font-size: 18px;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .connect-button:hover {
            background-color: #2980b9; /* Hover color */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to The Construct DREX</h1>
        <img class="logo" src="logo.png" alt="DREX Logo">
        <br><br>
        <button class="connect-button" id="connect-wallet-button">Connect Wallet</button>
    </div>
    <script>
        // Add event listener to the "Connect Wallet" button
        document.getElementById('connect-wallet-button').addEventListener('click', async () => {

            fetch('/account/connect')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Connected wallet address: ${data.address}`);
                    } else {
                        alert(`Error connecting wallet: ${data.response}`);
                    }
                })
                .catch(error => {
                    console.error('API call error:', error);
                    alert('Error connecting wallet. Please try again.');
                });
        });
    </script>
    <script>
        window.onload = async () => {
    if (!window.keplr) {
        alert("Please install keplr extension");
    } else {
        const chainId = "injective-888";

        // Enabling before using the Keplr is recommended.
        // This method will ask the user whether to allow access if they haven't visited this website.
        // Also, it will request that the user unlock the wallet if the wallet is locked.
        await window.keplr.enable(chainId);
    
        const offlineSigner = window.keplr.getOfflineSigner(chainId);
    
        // You can get the address/public keys by `getAccounts` method.
        // It can return the array of address/public key.
        // But, currently, Keplr extension manages only one address/public key pair.
        // XXX: This line is needed to set the sender address for SigningCosmosClient.
        const accounts = await offlineSigner.getAccounts();
        console.log(accounts);
    }
}

    </script>
</body>
</html>
